import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import logging

# –õ–æ–≥–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = "–¢–æ–∫–µ–Ω –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ —Ç–≥"
VEGA_API_KEY = "–í–ï–ì–ê –¢–û–ö–ï–ù"
UNIVERSITY_NAME = "–†–¢–£ –ú–ò–†–≠–ê"
VEGA_API_URL = "https://vega.rest/aiadapter/api/generate"

# –ü—Ä–æ–º—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
PROMPT_TEMPLATE = """[INST]
<<SYS>>
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–æ–∑–¥–∞—é—â–∏–π –ø–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. 
–°—Ç–∏–ª—å: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –Ω–æ –±–µ–∑ –ø–∞—Ñ–æ—Å–∞. 
–§–æ—Ä–º–∞—Ç: 
1. –Ø—Ä–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Å —ç–º–æ–¥–∑–∏)
2. –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –î–µ—Ç–∞–ª–∏ (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –º–µ—Å—Ç–æ)
4. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (–º–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Ñ—Ä–∞–∑–∞)
5. –•–µ—à—Ç–µ–≥–∏

<</SYS>>

–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –æ —Å–æ–±—ã—Ç–∏–∏: {event_info}

–°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
üéØ [–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —ç–º–æ–¥–∑–∏]
‚ú® [–°—É—Ç—å —Å–æ–±—ã—Ç–∏—è] 
üìå –î–µ—Ç–∞–ª–∏: [–¥–∞—Ç–∞/–≤—Ä–µ–º—è/–º–µ—Å—Ç–æ] 
üöÄ [–ü—Ä–∏–∑—ã–≤ –∫ —É—á–∞—Å—Ç–∏—é] 
{hashtag}[/INST]"""

# –ó–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ–Ω–∫–µ –≤–µ–≥–∏
async def generate_post(event_info: str) -> str:

    def sync_request():
        try:
            response = requests.post(
                VEGA_API_URL,
                headers={
                    "Authorization": f"Bearer {VEGA_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "deepseek-r1:32b",
                    "prompt": PROMPT_TEMPLATE.format(
                        event_info=event_info[:500],
                        hashtag=UNIVERSITY_NAME.replace(" ", "")
                    ),
                    "temperature": 0.7,
                    "options": {
                        "stop": ["</think>", "<think>"],  #  –£–±—Ä–∞–ª —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ json
                        "num_ctx": 2048
                    }
                },
                verify=False,
                timeout=45
            )
            response.raise_for_status()
            full_response = response.json().get('response', '')

            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
            if '<think>' in full_response:
                clean_post = full_response.split('</think>')[-1].strip()
            else:
                clean_post = full_response.strip()

            return clean_post
        except requests.exceptions.RequestException as e:
            logger.error(f"Vega API error: {str(e)}")
            return None

    try:
        return await asyncio.to_thread(sync_request)
    except Exception as e:
        logger.error(f"Async error in generate_post: {str(e)}")
        return None
#–û–±—Ä–∞–±–æ—Ç–∫–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ {UNIVERSITY_NAME}.\n\n"
            "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '25 –∏—é–Ω—è –≤ 14:00 –≤ –∞—É–¥. 310 "
            "—Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ Python'), –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π!"
        )
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")

# –û–±—Ä–∞–±–æ–∫—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.chat.send_action(action="typing")

        if not update.message.text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.")
            return

        generated_text = await generate_post(update.message.text)

        if not generated_text:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        clean_post = generated_text.split('[/INST]')[-1].strip()
        if not clean_post:
            clean_post = generated_text.strip()  # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç

        await update.message.reply_text(f"üì¢ –ì–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç:\n\n{clean_post}")

    except ValueError as e:
        await update.message.reply_text(str(e))
    except Exception as e:
        logger.error(f"Error handling message: {str(e)}")
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω:\n\n"
            f"–£–≤–∞–∂–∞–µ–º—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã!\n"
            f"{update.message.text[:300]}\n"
            f"#{UNIVERSITY_NAME.replace(' ', '')} #–°–æ–±—ã—Ç–∏–µ"
        )


def main():
    try:
        application = Application.builder().token(TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()
    except Exception as e:
        logger.error(f"Failed to start bot: {str(e)}")


if __name__ == "__main__":
    main()