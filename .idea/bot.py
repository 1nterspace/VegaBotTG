import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from ollama import AsyncClient

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8000161068:AAHrJIgL6OpCY5fVseZbEm9mcX33UhBqg44"
MODEL_NAME = "llama3:instruct"
UNIVERSITY_NAME = "–†–¢–£ –ú–ò–†–≠–ê"

PROMPT_TEMPLATE = """[INST]
<<SYS>>–¢—ã —Å–æ–∑–¥–∞–µ—à—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.<</SYS>>

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É:
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ("–£–≤–∞–∂–∞–µ–º—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã!")
2. –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
3. –î–µ—Ç–∞–ª–∏ (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –º–µ—Å—Ç–æ)
4. –ü—Ä–∏–∑—ã–≤ –∫ —É—á–∞—Å—Ç–∏—é
5. –•–µ—à—Ç–µ–≥–∏: #{hashtag}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏: {event_info}[/INST]"""


async def generate_post(event_info: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é LLM"""
    client = AsyncClient()
    try:
        response = await client.generate(
            model=MODEL_NAME,
            prompt=PROMPT_TEMPLATE.format(
                event_info=event_info[:500],
                hashtag=UNIVERSITY_NAME.replace(" ", "")
            ),
            options={
                'temperature': 0.7,
                'num_ctx': 1024,
                'num_gpu': 1  # –î–ª—è Mac —Å M1/M2
            }
        )
        return response['response']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ {UNIVERSITY_NAME}.\n\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '25 –∏—é–Ω—è –≤ 14:00 –≤ –∞—É–¥. 310 "
        "—Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ Python'), –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π!"
    )


async def handle_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.chat.send_action(action="typing")
        generated_text = await generate_post(update.message.text)

        if not generated_text:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")

        clean_post = generated_text.split('[/INST]')[-1].strip()
        await update.message.reply_text(f"üì¢ –ì–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç:\n\n{clean_post}")

    except Exception as e:
        await update.message.reply_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–®–∞–±–ª–æ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n\n"
            f"–£–≤–∞–∂–∞–µ–º—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã!\n"
            f"{update.message.text[:300]}\n"
            f"#{UNIVERSITY_NAME.replace(' ', '')} #–°–æ–±—ã—Ç–∏–µ"
        )


def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_event))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()